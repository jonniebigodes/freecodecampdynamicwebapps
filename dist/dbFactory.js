'use strict';Object.defineProperty(exports,'__esModule',{value:!0}),exports.checkCollections=exports.removeOne=exports.searchByID=exports.search=exports.injectOneItem=exports.disconnect=exports.createCollections=exports.testConnection=exports.connect=exports.comparePassword=exports.isConnected=exports.getUrl=exports.setUrl=void 0;var _mongodb=require('mongodb'),dbClient=_interopRequireWildcard(_mongodb),_bcryptNodejs=require('bcrypt-nodejs'),cryptoModule=_interopRequireWildcard(_bcryptNodejs);function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}var urlServer='',dbInstance={},setUrl=exports.setUrl=function(a){urlServer=a},getUrl=exports.getUrl=function(){return urlServer},isConnected=exports.isConnected=function(){return dbInstance===void 0},comparePassword=exports.comparePassword=function(a,b){return new Promise(function(c,d){var e=cryptoModule.compareSync(a,b);console.log('===================================='),console.log('client value: '+a+' dbvalue:'+b+' result compare:'+e),console.log('===================================='),e?c('PWD_OK'):d('PWD_NOK')})},connect=exports.connect=function(){return console.log('===================================='),console.log('entered connect'),console.log('===================================='),new Promise(function(a,b){dbClient.MongoClient.connect(urlServer,function(c,d){c&&b('Error on connect: '+c.code+' \nstatus message:'+c.message),dbInstance=d,a(!0)})})},testConnection=exports.testConnection=function(){return console.log('Testing connection....'),new Promise(function(a,b){connect(urlServer).then(function(b){disconnect(),a(b)}).catch(function(a){b(a)})})},createCollections=exports.createCollections=function(a){return new Promise(function(b,c){dbInstance||c('Connect first to the database then create the collections');var d=!0,e=!1,f=void 0;try{for(var g,h=function(){var a=g.value;console.log('Creating item in collections: '+a),dbInstance.createCollection(a,{autoIndexID:!0},function(b){b&&c('Error creating collection:'+a+'\nReason:'+b.code+' \nstatus message:'+b.message)})},i=a[Symbol.iterator]();!(d=(g=i.next()).done);d=!0)h()}catch(a){e=!0,f=a}finally{try{!d&&i.return&&i.return()}finally{if(e)throw f}}b(!0)})},disconnect=exports.disconnect=function(){dbInstance&&(console.log('Now closing connection'),dbInstance.close(),dbInstance={})},injectOneItem=exports.injectOneItem=function(a){return console.log('===================================='),console.log('entered inject one item'),console.log('===================================='),new Promise(function(b,c){dbInstance||c('Connect first to the database then inject the data'),dbInstance.collection(a.collectionName).insertOne(a.data,function(d,e){d&&c('Error on insert item:'+a.collectionName+' \n'+d.code+' \nstatus message:'+d.message),console.log('inserted record:'+e.ops[0]._id),b(e.ops[0]._id)})})},search=exports.search=function(a){return console.log('===================================='),console.log('search value search: '+JSON.stringify(a.queryParam)+'\ncollection name:'+a.collectionName+' '),console.log('===================================='),new Promise(function(b,c){dbInstance||c('Connect first to the database then search the data'),dbInstance.collection(a.collectionName).find(a.queryParam).toArray(function(d,e){d&&c('Error on querying data:'+a.collectionName+'\n'+d.code+'\nstatus message:'+d.message),console.log('===================================='),console.log('data returned:'+JSON.stringify(e)),console.log('===================================='),b(e)})})},searchByID=exports.searchByID=function(a){return console.log('===================================='),console.log('search value search: '+JSON.stringify(a.queryParam)+'\ncollection name:'+a.collectionName+' '),console.log('===================================='),new Promise(function(b,c){dbInstance||c('Connect first to the database then search the data'),dbInstance.collection(a.collectionName).find({_id:new dbClient.ObjectId(a.queryParam._id)}).toArray(function(d,e){d&&c('Error on querying data:'+a.collectionName+'\n'+d.code+'\nstatus message:'+d.message),console.log('===================================='),console.log('data returned:'+JSON.stringify(e)),console.log('===================================='),b(e)})})},removeOne=exports.removeOne=function(a){return new Promise(function(b,c){dbInstance||c('Connect first to the database then search the data'),dbInstance.collection(a.collectionName).deleteOne(a.data,function(d,e){d&&c('Error on insert item:'+a.collectionName+' \n'+d.code+' \nstatus message:'+d.message),b('the record with the following criteria was removed:'+JSON.stringify(a.queryParam)+'\nresult:'+JSON.stringify(e))})})},checkCollections=exports.checkCollections=function(){return new Promise(function(a,b){dbInstance||b('Connect first to the database then search the data')})};