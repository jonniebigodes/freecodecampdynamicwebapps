import React, {Component } from 'react';
import { connect } from 'react-redux';
import PropTypes  from 'prop-types';
import Dialog from 'material-ui/Dialog';
import FlatButton from 'material-ui/FlatButton';
import {DateField, DatePicker} from 'react-date-picker';
import RaisedButton from 'material-ui/RaisedButton';
import TextField from 'material-ui/TextField';
import {GridList} from 'material-ui/GridList';
import moment from 'moment';

import {setDataInit,
    setDataFinal,
    setValueStock,
    fetchStocksIfNeeded,
    resetAppError,
    setAppError,
    delStocks,
    setStocksExit

} from '../../../../common/actions/stockAppActions';
import '../../../../Assets/stylesheets/base.scss';
import '../../../../Assets/stylesheets/stocksApp.scss';
import {stockInformationStyles} from '../../../../Assets/styles/stockStyles';
import 'react-date-picker/index.css';
import {StockInformation} from './stockInformation';
class StockContainer extends Component {
    /**
     * react guard method to handle the component unload
     */
    componentWillUnmount(){
        this.props.unloadStocksApp(true);
    }
    /**
     * event handler for setting the start date
     * @param {*} e the object generated by the event
     */
    handleStartDate=(e)=>{
        let newDateRecieved= moment(e).format("YYYY-MM-DD");
        //console.log("start date: "+ newDateRecieved+" "+ moment(newDateRecieved).format("YYYY-MM-DD"));

        this.props.setInitDate(newDateRecieved);
    }
    /**
     * event handler for setting the end date
     * @param {*} e the object generated by the event 
     */
    handleEndDate=(e)=>{
        let newDateRecieved= moment(e).format("YYYY-MM-DD");
        //console.log("end date: "+ newDateRecieved+" "+ moment(newDateRecieved).format("YYYY-MM-DD"));
        this.props.setFinalDate(newDateRecieved);
        
    }
     isStockAlreadyAdded=(value)=>{
         if (this.props.items.length===0){
             return false;
         }
        let tmpItem=value.stockName.toUpperCase()+"-"+value.startDate+"-"+value.endDate;

        //console.log("search item: "+ tmpItem);
        let datainState=this.props.items.find(x=>x.searchIndex.toUpperCase()===tmpItem);
        //console.log("exists item: "+datainState);
        return datainState;
    }
    /**
     * function to set the data and get it from the server
     */
    searchStockInformation=(e)=>{
        e.preventDefault();
        let tmpStock={stockName:this.props.nameofStock,startDate:this.props.startingDate,endDate:this.props.endingDate};
        if(this.isStockAlreadyAdded(tmpStock)){
            this.props.setError("Someone forgot something, didn't you?\nThis one was already added");
            return;
        }


        let tmpDateCompare= tmpStock.endDate<tmpStock.startDate;
        //console.log("end date minor than start date"+ tmpDateCompare);
        
        if (tmpStock.stockName&& tmpStock.startDate &&tmpStock.endDate){
            if (tmpDateCompare){
                this.props.setError("What's the matter cupcake can't read dates????");
            }
            else{
                this.props.searchItemsNeeded(tmpStock);
            }
            
        }
        else{
            this.props.setError("Someone forgot something, didn't you?\nCheck the search items again");
        }
        
    }
    /**
     * event handler for the search item update
     * @param {*} e the object generated by the event
     */
    updateSearchTerm=(e)=>{
        e.preventDefault();
        //console.log("update term: "+ e.target.value);
        this.props.setValueStock(e.target.value);
    }
    /**
     * event handler for canceling the form submition
     */
    cancelFormSubmit=(e)=>{
        e.preventDefault();
        return false;
    }
    /**
     * fat arrow event handler to reset the app error
     * @param {*} event handler
     */
    resetError=(e)=>{
        e.preventDefault();
        this.props.setErrorReset(true);
    }
    /**
     * fat arrow function to render the ui
     */
    renderSearch = () => {
      
        return (
            <form onSubmit={this.cancelFormSubmit} className="form-inline">
                <div className="form-group">
                    <TextField hintText="Fill in with a valid stock code"
                           errorText="This field is required"
                           floatingLabelText="Stock Code"
                           value={this.props.nameofStock}
                           onChange={this.updateSearchTerm}
                           inputStyle={stockInformationStyles.searchStyles.buttonSearchlabel}
                           errorStyle={stockInformationStyles.searchStyles.errorStyle}
                           underlineStyle={stockInformationStyles.searchStyles.underlineStyle}
                           underlineFocusStyle={stockInformationStyles.searchStyles.underlineStyle}
                           floatingLabelStyle={stockInformationStyles.searchStyles.floatingLabelStyle}
                           floatingLabelFocusStyle={stockInformationStyles.searchStyles.floatingLabelFocusStyle}
                           />
                </div>
                <div className="form-group">
                    <label className="textLabel">From:</label>
                    <DateField
                        dateFormat="YYYY-MM-DD"
                        defaultValue={this.getCurrentDate()}
                        updateOnDateClick
                        collapseOnDateClick
                        forceValidDate
                        footer={false}
                        showClock={false}>
                        <DatePicker
                            id="startDate"
                            navigation
                            forceValidDate
                            highlightToday
                            highlightWeekends
                            weekNumbers={false}
                            weekStartDay={0}
                            onChange={(e)=>this.handleStartDate(e)}
                            selected={this.props.startDate}/>
                    </DateField>
                    <label className="textLabel">TO:</label>
                    <DateField
                        id="endate"
                        dateFormat="YYYY-MM-DD"
                        defaultValue={this.getCurrentDate()}
                        forceValidDate
                        footer={false}
                        showClock={false}
                        dateFormat="YYYY-MM-DD"
                        defaultValue={this.getCurrentDate()}
                        updateOnDateClick
                        collapseOnDateClick>
                        <DatePicker
                            navigation
                            forceValidDate
                            highlightToday
                            highlightWeekends
                            weekNumbers={false}
                            weekStartDay={0}
                            onChange={(e) =>this.handleEndDate(e)}
                            selected={this.props.endDate}/>
                    </DateField>
                </div>
                
            <RaisedButton 
                key="btnSearch" buttonStyle={stockInformationStyles.searchStyles.buttonSearch}
                label="Search" labelStyle={stockInformationStyles.searchStyles.buttonSearchlabel} 
                onClick={this.searchStockInformation} 
                
                />
            </form>
            
        );
    }
   deleteItem=(e)=>{
       //console.log("item marked deletion;  "+e);
       this.props.removeitem(e);
   }
   
     /**
     * fat arrow function to generate the current date
     */
    getCurrentDate = () => {
        return new Date();
    }
    /**
     * component render function
     */
    render(){
        
        const actionsDialog = [
                <FlatButton
                    key="stockContainerDialogComponent"
                    label="Ok"
                    primary
                    onTouchTap={this.resetError}
                />,
                ];
        return(
            <div className="container-fluid containerApp" key="containerContentAppStocks">
                {this.renderSearch()}
                <Dialog key="errorDialog"
                        actions={actionsDialog}
                        modal={false}
                        open={this.props.isError}
                        onRequestClose={this.resetError}>
                <h3>Ups!!!!<br/> Something went wrong with the search!<br/>Check out the problem bellow</h3>
                <br/>
                <h4>{this.props.errorMessageApp}</h4>
                </Dialog>
                <div className="voffset3"/>
                <div style={stockInformationStyles.gridStyles.root}>
                    <GridList style={stockInformationStyles.gridStyles.gridList} >
                        {this.props.items.map((elementResult,i)=>{
                            return(
                              <StockInformation key={"StockInformation_"+i} chartData={elementResult.searchResults} deleteitem={(e)=>this.deleteItem(elementResult.searchIndex)}/>
                            );
                            })
                        }
                </GridList>
                </div>
                
            </div>
           
        );
    }
    
    


}
/**
 * fat arrow function to map the state of the app to props for the component
 * @param {*} state current state 
 */
const mapStateToProps =(state)=>{
     return {
        items:state.stocks.items,
        startingDate:state.stocks.initialDate,
        endingDate:state.stocks.finalDate,
        nameofStock:state.stocks.stockQuery,
        isError:state.stocks.onError,
        errorMessageApp:state.stocks.errorMessage
     };
};

/**
 * funtion to connect the actions to the ui
 * @param {*} dispatch function send to store 
 */
const mapDispatchToProps = (dispatch) => {
    return {
        setValueStock: (name) => {
            dispatch(setValueStock(name));
        },
        setInitDate:(value)=>{
            dispatch(setDataInit(value));
        },
        setFinalDate:(value)=>{
            dispatch(setDataFinal(value));
        },
        searchItemsNeeded:(value)=>{
            dispatch(fetchStocksIfNeeded(value));
        },
        setErrorReset:(value)=>{
            dispatch(resetAppError(value));
        },
        setError:(value)=>{
            dispatch(setAppError(value));
        },
        removeitem:(value)=>{
            dispatch(delStocks(value));
        },
        unloadStocksApp:(value)=>{
            dispatch(setStocksExit(value));
        }
    };
};

export default connect(mapStateToProps,mapDispatchToProps)(StockContainer);
