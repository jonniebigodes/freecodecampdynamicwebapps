import React, {Component } from 'react';
import { connect } from 'react-redux';
import { PropTypes } from 'prop-types';
import {DateField, DatePicker} from 'react-date-picker';

import moment from 'moment';
import TextField from 'material-ui/TextField';
/* import Container from 'muicss/lib/react/container';
import Form from 'muicss/lib/react/form';
import Input from 'muicss/lib/react/input';
import Textarea from 'muicss/lib/react/textarea';
import Button from 'muicss/lib/react/button';
import Row from 'muicss/lib/react/row';
import Col from 'muicss/lib/react/col'; */
import {setDataInit,setDataFinal,setValueStock,fetchStocksIfNeeded,resetAppError,setAppError} from '../../../../common/actions/stockAppActions';
import '../../../../Assets/stylesheets/base.scss';
import '../../../../Assets/stylesheets/stocksApp.scss';
import 'react-date-picker/index.css';

//import {StockInformation} from './stockInformation';
class StockContainer extends Component {
    
    /**
     * fat arrow function to generate the current date
     */
    getCurrentDate = () => {
        return new Date();
    }
    /**
     * event handler for setting the start date
     * @param {*} e the object generated by the event
     */
    handleStartDate=(e)=>{
        let newDateRecieved= moment(e).format("YYYY-MM-DD");
        //console.log("start date: "+ newDateRecieved+" "+ moment(newDateRecieved).format("YYYY-MM-DD"));

        this.props.setInitDate(newDateRecieved);
    }
    /**
     * event handler for setting the end date
     * @param {*} e the object generated by the event 
     */
    handleEndDate=(e)=>{
        let newDateRecieved= moment(e).format("YYYY-MM-DD");
        //console.log("endate date: "+ newDateRecieved);
        this.props.setFinalDate(newDateRecieved);
        
    }

    searchStockInformation=(e)=>{
        e.preventDefault();
        let tmpStock={stockName:this.props.nameofStock,startDate:this.props.startingDate,endDate:this.props.endingDate};
        //console.log("container search stock date init:"+ this.props.startingDate+" date final: "+ this.props.endingDate+" item: "+ this.props.nameofStock);
        //console.log("object to search: stockname:"+ tmpStock.stockName+" start:"+tmpStock.startDate+ " end:"+ tmpStock.endDate);

        //console.log("len items: "+ this.props.items.length);
        if (tmpStock.stockName&& tmpStock.startDate &&tmpStock.endDate){
            this.props.searchItemsNeeded(tmpStock);
        }
        else{
            this.props.setError("Someone forgot something, didn't you?\nCheck the search items again");
        }
        
    }
    /**
     * event handler for the search item update
     * @param {*} e the object generated by the event
     */
    updateSearchTerm=(e)=>{
        e.preventDefault();
        //console.log("update term: "+ e.target.value);
        this.props.setValueStock(e.target.value);
    }
    cancelFormSubmit=(e)=>{
        e.preventDefault();
        return false;
    }
    resetError=(e)=>{
        e.preventDefault();
        this.props.setErrorReset(true);
    }
    /**
     * fat arrow function to render the ui
     */
    renderSearch = () => {
        const styles={};
        return (


            <form onSubmit={(e)=>this.cancelFormSubmit(e)} style="display: inline-block;">
                <TextField hintText="Hint Text"
                           errorText="This field is required"
                           onChange={(e)=>this.updateSearchTerm(e)}/>
                <label>Dates:</label>
                <DateField
                    dateFormat="YYYY-MM-DD"
                    defaultValue={this.getCurrentDate()}
                    updateOnDateClick={true}
                    collapseOnDateClick={true}
                    forceValidDate={true}
                    footer={false}
                    showClock={false}>
                    <DatePicker
                        id="startDate"
                        navigation={true}
                        forceValidDate={true}
                        highlightToday={true}
                        highlightWeekends={true}
                        weekNumbers={false}
                        weekStartDay={0}
                        onChange={(e)=>this.handleStartDate(e)}
                        selected={this.props.startDate}/>
                </DateField>
                <label>TO:</label>
                <DateField
                    id="endate"
                    dateFormat="YYYY-MM-DD"
                    defaultValue={this.getCurrentDate()}
                    forceValidDate={true}
                    footer={false}
                    showClock={false}
                    dateFormat="YYYY-MM-DD"
                    defaultValue={this.getCurrentDate()}
                    updateOnDateClick={true}
                    collapseOnDateClick={true}
                    forceValidDate={true}
                    footer={false}
                    showClock={false}>
                    <DatePicker
                        navigation={true}
                        forceValidDate={true}
                        highlightToday={true}
                        highlightWeekends={true}
                        weekNumbers={false}
                        weekStartDay={0}
                        onChange={(e) =>this.handleEndDate(e)}
                        selected={this.props.endDate}/>
                </DateField>
            </form>
            /* <Form inline={true} onSubmit={(e)=>this.cancelFormSubmit(e)}>
                <legend>Search Stocks:</legend>
                <Input label="Stock code" floatingLabel={true} required={true} onChange={(e)=>this.updateSearchTerm(e)}/>
                <label>Dates:</label>
                <DateField
                    dateFormat="YYYY-MM-DD"
                    defaultValue={this.getCurrentDate()}
                    updateOnDateClick={true}
                    collapseOnDateClick={true}
                    forceValidDate={true}
                    footer={false}
                    showClock={false}>
                    <DatePicker
                        id="startDate"
                        navigation={true}
                        forceValidDate={true}
                        highlightToday={true}
                        highlightWeekends={true}
                        weekNumbers={false}
                        weekStartDay={0}
                        onChange={(e)=>this.handleStartDate(e)}
                        selected={this.props.startDate}/>
                </DateField>
                <label>TO:</label>
                <DateField
                    id="endate"
                    dateFormat="YYYY-MM-DD"
                    defaultValue={this.getCurrentDate()}
                    forceValidDate={true}
                    footer={false}
                    showClock={false}
                    dateFormat="YYYY-MM-DD"
                    defaultValue={this.getCurrentDate()}
                    updateOnDateClick={true}
                    collapseOnDateClick={true}
                    forceValidDate={true}
                    footer={false}
                    showClock={false}>
                    <DatePicker
                        navigation={true}
                        forceValidDate={true}
                        highlightToday={true}
                        highlightWeekends={true}
                        weekNumbers={false}
                        weekStartDay={0}
                        onChange={(e) =>this.handleEndDate(e)}
                        selected={this.props.endDate}/>
                </DateField>
                <Button variant="fab" color="D9853B" size="small" onClick={(e) =>{this.searchStockInformation(e)}}>S</Button>
            </Form> */
        );
    }
   

    render(){
        //console.log("len items container: " +this.props.items.length);
        //console.log("IS ERROR: "+ this.props.isError);
        
        return(
            <div >
                {this.renderSearch()}
                <div className="voffset3"/>
                </div>
            // <Container id="containerStocks" key="containerStocks" fluid={true} className="containerApp">
               
            //    <div className={this.props.isError?"SearchError":"SearchErrorhidden"}>
            //        <h3>{this.props.errorMessageApp}</h3>  
            //        <Button variant="raised" onClick={(e) =>{this.resetError(e)}}>Ok</Button>
            //    </div>
            //    <div key="row_item_search" className="containerElements" style={{opacity:this.props.isError?0.5:1}}>
            //        {
            //            this.props.items.map((elementResult,i)=>{
            //                return(
            //                    <Col xs="6" md="4" key={"col_"+ i}>
            //                        <StockInformation key={"StockInformation_"+i} chartData={elementResult.searchResults}/>
            //                    </Col>
            //                )
            //            })
            //        }
            //    </div>

               
              
            // </Container>
        );
    }
    
    


}

const mapStateToProps =(state)=>{
     return {
        items:state.stocks.items,
        startingDate:state.stocks.initialDate,
        endingDate:state.stocks.finalDate,
        nameofStock:state.stocks.stockQuery,
        isError:state.stocks.onError,
        errorMessageApp:state.stocks.errorMessage
     };
}
const mapDispatchToProps = (dispatch) => {
    return {
        setValueStock: (name) => {
            dispatch(setValueStock(name));
        },
        setInitDate:(value)=>{
            dispatch(setDataInit(value));
        },
        setFinalDate:(value)=>{
            dispatch(setDataFinal(value));
        },
        searchItemsNeeded:(value)=>{
            dispatch(fetchStocksIfNeeded(value));
        },
        setErrorReset:(value)=>{
            dispatch(resetAppError(value));
        },
        setError:(value)=>{
            dispatch(setAppError(value));
        }
    };
};
//export default StockContainer;
export default connect(mapStateToProps,mapDispatchToProps)(StockContainer)
//export default connect(mapStateToProps,mapDispatchToProps)(StockContainer);