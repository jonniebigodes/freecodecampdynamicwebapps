import React, { Component } from 'react';
import PropTypes from 'prop-types';
import TextField from 'material-ui/TextField';
import SnackBar from 'material-ui/Snackbar';
import DatePicker from 'material-ui/DatePicker';
import RaisedButton from 'material-ui/RaisedButton';
import moment from 'moment';

class StockSearch extends Component{

    constructor(props){
        super(props);
        this.state={
            searchQuery:'',
            startDate:'',
            endDate:'',
            snackOpen:false
        };
    }
    cancelForm=()=>{
        return false;
    }
    handleKeys=(e)=>{
        if (e.key==='Enter'){
            this.searchStockInformation();
        }
    }
    /**
     * event handler for the search item update
     * @param {*} e the object generated by the event
     */
    updateSearchTerm=(e)=>{
        this.setState({searchQuery:e.target.value});
    }
    /**
     * event handler for the the date start
     * @param {*} e the object generated by the event
     */
    setStartDate=(e,value)=>{
        const dateformatted=moment(value).format('YYYY-MM-DD');
       
        this.setState({startDate:dateformatted});
    }
    /**
     * event handler for the the date end
     * @param {*} e the object generated by the event
     */
    setEndDate=(e,value)=>{
        const dateformatted=moment(value).format('YYYY-MM-DD');
        
        this.setState({endDate:dateformatted});
    }
    searchStockInformation=()=>{
        const {searchQuery,startDate,endDate}=this.state;
        if (searchQuery==='' || startDate==='' ||endDate===''){
            this.setState({snackOpen:true});
            return;
        }
        let tmpStock={stockName:searchQuery,startDate:startDate,endDate:endDate};
        this.props.queryStocks(tmpStock);
        setTimeout(() => {
            this.setState({searchQuery:'',startDate:'',endDate:''});
        }, 2000);
    }
    setFormatDate=(value)=>{
        const dateformatted=moment(value).format('YYYY-MM-DD');
        return dateformatted;
    }
    requestCloseSnackBar=()=>{
        this.setState({snackOpen:false});
    }
    render(){
        const {searchQuery,snackOpen}= this.state;
        
        return (
            <div>
                <form onSubmit={this.cancelForm} className="form-inline">
                    <div className="form-group">
                        <TextField hintText="Fill in with a valid stock code"
                            errorText="This field is required"
                            floatingLabelText="Stock Code"
                            value={searchQuery}
                            onChange={this.updateSearchTerm}
                            onKeyPress={this.handleKeys}/>
                    </div>
                    <div className="form-group">
                        <DatePicker 
                        mode="landscape" 
                        autoOk
                        hintText="Select the start date"
                        onChange={this.setStartDate} 
                        formatDate={this.setFormatDate}/>
                    </div>
                    <div className="form-group">
                        <DatePicker 
                        hintText="Select the end date" 
                        mode="landscape" 
                        autoOk
                        onChange={this.setEndDate} formatDate={this.setFormatDate}/>
                    </div>
                    <div className="form-group">
                        <RaisedButton
                            primary
                            key="btnSearch"
                            label="Search" 
                            onClick={this.searchStockInformation} />
                    </div>
                </form>
                <SnackBar message="Fill in the missing information to search for stocks" 
                    autoHideDuration={4000}
                    open={snackOpen}
                    onRequestClose={this.requestCloseSnackBar} />
            </div>
            
        );
    }
}
StockSearch.propTypes={
    queryStocks:PropTypes.func.isRequired
};
export default StockSearch;