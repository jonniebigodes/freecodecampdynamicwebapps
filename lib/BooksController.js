'use strict';var httpService=require('./httpService'),dbService=require('./dbFactory'),path=require('path');module.exports={getAllBooks:function getAllBooks(a,b){dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){Promise.all([dbService.search({collectionName:'books',queryParam:{}}),dbService.search({collectionName:'users',queryParam:{}}),dbService.search({collectionName:'book_trades',queryParam:{}})]).then(function(a){dbService.disconnect();var c=a[0],d=a[1],e=a[2],f=[];if(!c.length&&!d.length)return b.writeHead(200,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda005',userData:'NO DATA'}));var g=!0,h=!1,i=void 0;try{for(var j,k=function(){var a=j.value,b=!0,c=!1,g=void 0;try{for(var h,i=function(){var b=h.value,c=d.find(function(b){return b._id==a.user});if(c){var g,i=e.find(function(a){return a.bookid==b.idbook&&1==a.statustrade});i&&(g=d.find(function(a){return a._id==i.tradedto})),f.push({booktoken:b.idbook,bookowner:a.user,bookname:b.name,bookauthor:b.author,bookcover:b.imgcover,bookreview:b.review,bookownercontact:c.local_email,bookisbeingtraded:i!==void 0,bookbeingtradedto:g===void 0?'':g.local_email})}},k=a.booklist[Symbol.iterator]();!(b=(h=k.next()).done);b=!0)i()}catch(a){c=!0,g=a}finally{try{!b&&k.return&&k.return()}finally{if(c)throw g}}},l=c[Symbol.iterator]();!(g=(j=l.next()).done);g=!0)k()}catch(a){h=!0,i=a}finally{try{!g&&l.return&&l.return()}finally{if(h)throw i}}b.writeHead(200,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda005',bookData:f}))}).catch(function(a){dbService.disconnect(),console.log('===================================='),console.log('error promise all searches:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})}).catch(function(a){console.log('===================================='),console.log('error getting the books:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})},addBookCollection:function addBookCollection(a,b){return a.body.usertoken&&a.body.bookName?void(dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){return dbService.search({collectionName:'books',queryParam:{user:a.body.usertoken}})}).then(function(c){c.length?dbService.updateData({collectionName:'books',queryParam:{dataselect:{user:a.body.usertoken},datacriteria:{$addToSet:{booklist:{idbook:a.body.bookId,name:a.body.bookName,author:a.body.authorName,imgcover:a.body.imgCoverLocation===void 0?'':a.body.imgCoverLocation,review:a.body.bookReview===void 0?'':a.body.bookReview}}}}}).then(function(){dbService.disconnect(),b.writeHead(200,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda005',reason:'The book:'+a.body.bookName+' was added to the collection'}))}).catch(function(a){dbService.disconnect(),console.log('===================================='),console.log('error adding the books:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))}):dbService.injectOneItem({collectionName:'books',data:{user:a.body.usertoken,booklist:[{idbook:a.body.bookId,name:a.body.bookName,author:a.body.authorName===void 0?'':a.body.authorName,imgcover:a.body.coverlink===void 0?'':a.body.coverlink,review:a.body.reviewlink===void 0?'':a.body.reviewlink}]}}).then(function(){dbService.disconnect(),b.writeHead(200,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda005',reason:'The book:'+a.body.bookName+' was added to the collection'}))}).catch(function(a){dbService.disconnect(),console.log('===================================='),console.log('error adding the books:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})}).catch(function(a){console.log('===================================='),console.log('error connect adding the books:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})):(b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda001',reason:'some information for the book submission was not provided'})))},tradeBook:function tradeBook(a,b){var c={apiKey:a.app.BLUEKEY,infoowner:'',infotrader:'',book:'',token:''};dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){Promise.all([dbService.search({collectionName:'book_trades',queryParam:{$and:[{statustrade:0},{bookid:a.body.bookid}]}}),dbService.search({collectionName:'users',queryParam:{}}),dbService.searchUniqueSubDocument({collectionName:'books',queryParam:[{$match:{"booklist.idbook":a.body.bookid}},{$project:{booklist:{$filter:{input:'$booklist',as:'itembook',cond:{$eq:['$$itembook.idbook',a.body.bookid]}}},_id:0}}]})]).then(function(d){return d[0].length?(dbService.disconnect(),b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda001',reason:'Book is currently being traded by another person'}))):void dbService.injectOneItem({collectionName:'book_trades',data:{bookid:a.body.bookid,tradedto:a.body.tradeuser,bookowner:a.body.bookowner,statustrade:0}}).then(function(e){dbService.disconnect();var f=d[1].find(function(b){return b._id==a.body.tradeuser}),g=d[1].find(function(b){return b._id==a.body.bookowner});c.infoowner=g.local_email,c.infotrader=f.local_email,c.name=d[2][0].booklist[0].name,c.book=d[2].name,c.token=e,console.log('===================================='),console.log('Mail DATA INFO:'+JSON.stringify(c,null,2)),console.log('===================================='),httpService.sendMail(c).then(function(a){return a?(b.writeHead(200,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda005',reason:'TRADEREQUESTOK'}))):void(b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'ERROR NOTIFICATION'})))}).catch(function(a){console.log('===================================='),console.log('error sendmail the books:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})}).catch(function(a){dbService.disconnect(),console.log('===================================='),console.log('error errorinjecttrade the books:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})}).catch(function(a){console.log('===================================='),console.log('error trading the books:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})}).catch(function(a){console.log('===================================='),console.log('error trading the books:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})},tradeReject:function tradeReject(a,b){return a.query.tokentrade?void(dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){return dbService.updateById({collectionName:'book_trades',queryParam:{dataselect:{item:a.query.tokentrade},datacriteria:{$set:{statustrade:2}}}})}).then(function(a){dbService.disconnect(),console.log('===================================='),console.log('resultRejectTrade removing the trade of the books:'+a),console.log('===================================='),b.sendFile('rejecttrade.html',{root:path.join(__dirname,'../dist/')})}).catch(function(a){console.log('===================================='),console.log('error rejecting the books trade:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})):(b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda005',reason:'NO TOKEN PROVIDED'})))},tradeAccept:function tradeAccept(a,b){return a.query.tokentrade?void(dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){return dbService.searchByID({collectionName:'book_trades',queryParam:{_id:a.query.tokentrade}})}).then(function(c){return console.log('===================================='),console.log('tradebook accept result of query search trades:'+JSON.stringify(c,null,2)),console.log('====================================\n\n\n\n\n'),c.length?c[0].statustrade?(dbService.disconnect(),b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda005',reason:'That trade was already processed'}))):void Promise.all([dbService.search({collectionName:'books',queryParam:{user:c[0].tradedto}}),dbService.searchUniqueSubDocument({collectionName:'books',queryParam:[{$match:{"booklist.idbook":c[0].bookid}},{$project:{booklist:{$filter:{input:'$booklist',as:'itembook',cond:{$eq:['$$itembook.idbook',c[0].bookid]}}},_id:0}}]}),dbService.updateById({collectionName:'book_trades',queryParam:{dataselect:{item:a.query.tokentrade},datacriteria:{$set:{statustrade:1}}}}),dbService.updateData({collectionName:'books',queryParam:{dataselect:{user:c[0].bookowner},datacriteria:{$pull:{booklist:{idbook:c[0].bookid}}}}})]).then(function(a){console.log('===================================='),console.log('accept trade search books by id:'+JSON.stringify(a,null,2)),console.log('====================================');var d=a[1],e=d[0];console.log('===================================='),console.log('book in question:'+JSON.stringify(d,null,2)+' \n infoBook:'+JSON.stringify(e,null,2)),console.log('===================================='),a[0].length?dbService.updateData({collectionName:'books',queryParam:{dataselect:{user:c[0].tradedto},datacriteria:{$addToSet:{booklist:{idbook:e.booklist[0].idbook,name:e.booklist[0].name,author:e.booklist[0].author,imgcover:e.booklist[0].imgcover,review:e.booklist[0].review}}}}}).then(function(a){console.log('===================================='),console.log('data added:'+JSON.stringify(a)),console.log('===================================='),b.sendFile('resulttrade.html',{root:path.join(__dirname,'../dist/')})}).catch(function(a){dbService.disconnect(),console.log('===================================='),console.log('error accept trade of the books:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))}):dbService.injectOneItem({collectionName:'books',data:{user:c[0].tradedto,booklist:[{idbook:e.booklist[0].idbook,name:e.booklist[0].name,author:e.booklist[0].author,imgcover:e.booklist[0].imgcover,review:e.booklist[0].review}]}}).then(function(a){console.log('===================================='),console.log('data added:'+JSON.stringify(a)),console.log('===================================='),b.status(200).send('../dist/resulttrade.html')}).catch(function(a){dbService.disconnect(),console.log('===================================='),console.log('error adding the books:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})}).catch(function(a){dbService.disconnect(),console.log('===================================='),console.log('error accept trade of the books:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))}):(dbService.disconnect(),b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda005',reason:'No trade with the token provided exists'})))}).catch(function(a){console.log('===================================='),console.log('error BookController connect to db:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})):(b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda005',reason:'NO TOKEN PROVIDED'})))}};