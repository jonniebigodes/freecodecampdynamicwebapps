'use strict';var dbService=require('./dbFactory');module.exports={getPolls:function getPolls(a,b){dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){Promise.all([dbService.search({collectionName:'polls',queryParam:{}}),dbService.search({collectionName:'users',queryParam:{}})]).then(function(a){dbService.disconnect();var c=a[0],d=a[1],e=[];if(c.length){var f=!0,g=!1,h=void 0;try{for(var i,j=function(){var a=i.value,b=d.find(function(b){return b._id==a.user});b&&e.push({polltoken:a._id,pollcreator:b.local_email,polloptions:a.polloptions})},k=c[Symbol.iterator]();!(f=(i=k.next()).done);f=!0)j()}catch(a){g=!0,h=a}finally{try{!f&&k.return&&k.return()}finally{if(g)throw h}}}b.writeHead(200,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda005',polldata:e}))}).catch(function(a){dbService.disconnect(),console.log('===================================='),console.log('error promise all poll:'+a),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})}).catch(function(a){console.log('===================================='),console.log('Polls Controller get polls error on connect:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})},deletePoll:function deletePoll(a,b){return a.body.polltoken?void(dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){return dbService.removeById({collectionName:'polls',queryParam:{data:a.body.polltoken}})}).then(function(c){dbService.disconnect(),console.log('===================================='),console.log('data removed result:'+JSON.stringify(c,null,2)),console.log('===================================='),b.writeHead(200,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda005',reason:'Poll number:'+a.body.polltoken+' was removed'}))}).catch(function(a){console.log('===================================='),console.log('Polls Controller delete Polls error on connect:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})):(b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda001',reason:'some information for the operation was not provided'})))},createPoll:function createPoll(a,b){return a.body.usertoken?void(dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){return dbService.injectOneItem({collectionName:'polls',data:{user:a.body.usertoken,name:a.body.pollname,polloptions:a.body.polldataoptions}})}).then(function(){dbService.disconnect(),b.writeHead(200,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda005',reason:'Poll '+a.body.pollname+' was added to the fold'}))}).catch(function(a){console.log('===================================='),console.log('Polls Controller createPoll error on connect:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})):(b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda001',reason:'some information for the operation was not provided'})))},voteOnPoll:function voteOnPoll(a,b){return a.body.usertoken&&a.body.polltoken?void(dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){dbService.updateData({collectionName:'polls',queryParam:{dataselect:{item:{polloptions:{idpollOption:a.body.polltoken}}},datacriteria:{$inc:{polloptions:{$:{vote:1}}}}}})}).then(function(a){console.log('===================================='),console.log('vote poll result update:'+JSON.stringify(a,null,2)),console.log('====================================')}).catch(function(a){console.log('===================================='),console.log('Polls Controller voteOnPoll error on connect:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})):(b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda001',reason:'some information for the book submission was not provided'})))},addPollOption:function addPollOption(a,b){return a.body.usertoken&&a.body.polltoken?void(dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){return dbService.updateById({collectionName:'polls',queryParam:{dataselect:{_id:a.body.tokenPoll},datacriteria:{$addToSet:{polloptions:{idoption:a.body.polloptiontoken,optionname:a.body.polloptionName,votes:0}}}}})}).then(function(a){dbService.disconnect(),console.log('===================================='),console.log('add poll option result update :'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(200,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda005',reason:'poll updated'}))}).catch(function(a){console.log('===================================='),console.log('Polls Controller addPollOption error on connect:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})):(b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda001',reason:'some information for the book submission was not provided'})))},getPollDetails:function getPollDetails(a,b){return a.query.polltoken?void(dbService.setUrl(a.app.MONGODB),dbService.connect().then(function(){return dbService.searchByID({collectionName:'polls',queryParam:{_id:a.query.polltoken}})}).then(function(a){return dbService.disconnect(),console.log('===================================='),console.log('GOT DATA:'+JSON.stringify(a,null,2)),console.log('===================================='),a.length?void(b.writeHead(200,{"Content-Type":'application/json'}),b.end(JSON.stringify({polltoken:a[0]._id,pollname:a[0].name,polloptions:a[0].polloptions}))):(b.writeHead(200,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda001',reason:'No poll with the token provided exists'})))}).catch(function(a){console.log('===================================='),console.log('Polls Controller getPollDetails error on connect:'+JSON.stringify(a,null,2)),console.log('===================================='),b.writeHead(500,{"Content-Type":'application/json'}),b.end(JSON.stringify({code:'fccda001',reason:'Server Internal Error'}))})):(b.writeHead(500,{"Content-Type":'application/json'}),void b.end(JSON.stringify({code:'fccda001',reason:'No token provided'})))}};